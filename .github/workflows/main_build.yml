name: Reusable main build workflow

on:
  workflow_call:
    inputs:
      conan_customparams:
        description: "Optional custom parameters to conan install/create commands."
        type: string
      conan_hostprofile:
        description: "Host profile used by Conan commands."
        default: "game"
        type: string
      deployrecipe_userchannel:
        description: >-
          Control execution of the deployment of Conan recipe, as well as user and channel.
        default: "" # Default does not execute the step
        type: string
      step_artifacts:
        description: "Control execution of the github upload of build artifacts."
        default: false
        type: boolean
      step_conancache:
        description: "Control execution of the cache action over Conan local packages."
        default: true
        type: boolean
      step_runtests:
        description: "Control execution of the testing step, running the 'tests' application."
        default: true
        type: boolean
      os:
        description: >-
          Stringified JSON array listing the target runner OSes.
        default: >-
          ["ubuntu-22.04", "windows-2022", "macos-12"]
        type: string
      version:
        description: "Version number to use in the recipe and CMake build."
        required: false
        type: string

    secrets:
      SHREDROBOT_GITHUB_TOKEN:
        required: true
      ACTION_CACHENAME:
        required: true
      CONAN_USER_NAME:
        required: true
      CONAN_USER_PASSWORD:
        required: true

env:
  # Control Conan behaviour
  # Apparently glfw/3.3.4 is not compatible with Conan v2
  #CONAN_V2_MODE: 1
  CONAN_SCM_TO_CONANDATA: 1
  # Required at least for opengl/system on Linux runner, which must use the package manager.
  # Is it still useful with tools.system.package_manager:mode in the profile?
  CONAN_SYSREQUIRES_MODE: enabled
  # Some recipe need to use short-path on Windows because of some MSBUILD limitation with long path
  # as of today (2022/10/27).
  # The recipes itself will specify short path explicitly, but we control the shortpath prefix
  # to use the same value in conan cache. (We set what is the currently the default Conan value).
  # see: https://docs.conan.io/en/latest/reference/env_vars.html#conan-user-home-short
  CONAN_USER_HOME_SHORT: C:/.conan

jobs:
  build_test_deploy:
    name: Build, test, deploy
    strategy:
      matrix:
        #see: https://github.community/t/reusable-workflow-with-strategy-matrix/205676/2
        os: ${{fromJson(inputs.os)}}
        # 2022/07/19: a dummy compiler dimension must be declared, otherwise the includes would
        # overwrite each-other.
        # > Note that the original matrix values will not be overwritten,
        # > but added matrix values can be overwritten.
        compiler: [""]
        profile: ["${{inputs.conan_hostprofile}}"]
        cppstd: [20]
        # TODO Ad 2022/03/22: I do not know how to handle this optional dimension in a unified manner.
        # Deactivate it for the moment.
        #development_build: [true, false]
        # 2022/07/19: since os is already present in the original matrix, new combinations are created
        # from scratch.
        # see: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrixinclude
        # So, the included combinations must be explicit about each dimension.
        # This is why cppstd is repeated here.
        include:
          - os: ubuntu-22.04
            compiler: gcc
            gccversion: 12
            cppstd: 20
            profile: ${{inputs.conan_hostprofile}}
          - os: ubuntu-22.04
            compiler: clang
            clangversion: 14
            cppstd: 20
            profile: ${{inputs.conan_hostprofile}}
        # Exclude the "dummy" compiler for ubuntu.
        exclude:
          - os: ubuntu-22.04
            compiler: ""
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      # Otherwise recipes uploaded from Windows vs. Linux/macos
      # are considered different (the hash changes with line endings)
      # see: https://github.com/conan-io/conan-package-tools/issues/192
      # see: https://docs.conan.io/en/latest/faq/using.html?highlight=crlf#packages-got-outdated-when-uploading-an-unchanged-recipe-from-a-different-machine
      - run: git config --global core.autocrlf input

      - name: Select GCC version.
        if: runner.os == 'Linux' && matrix.compiler == 'gcc'
        run: |
          echo "CC=gcc-${{ matrix.gccversion }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.gccversion }}" >> $GITHUB_ENV

      - name: Select clang version.
        if: runner.os == 'Linux' && matrix.compiler == 'clang'
        run: |
          # Tried using update-alternatives but it did not update the alternative to clang++ only clang
          # which is sad
          echo "CC=clang-${{ matrix.clangversion }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.clangversion }}" >> $GITHUB_ENV


      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Add Python bin to PATH
        if: runner.os == 'macOS'
        run: echo "/Library/Frameworks/Python.framework/Versions/Current/bin" >> $GITHUB_PATH

      - name: Prepare recipe info
        id: recipe
        run: |
          # That is not the accurate recipe name, this is just by convention.
          # see: https://github.com/conan-io/conan/issues/9264
          recipe_name=${GITHUB_REPOSITORY#*/}
          echo "name=${recipe_name}" >> $GITHUB_OUTPUT
          recipe_version=${{ inputs.version }}
          if [ -z "$recipe_version" ]; then recipe_version=$(echo ${GITHUB_SHA} | cut -c1-10); fi
          echo "version=${recipe_version}" >> $GITHUB_OUTPUT
          recipe_userchannel=${{ inputs.deployrecipe_userchannel }}
          echo "reference=${recipe_name}/${recipe_version}@${recipe_userchannel}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.1

      - name: Configure Conan
        # Remotes, profiles, and settings
        run: conan config install https://${{ secrets.SHREDROBOT_GITHUB_TOKEN }}@github.com/ShredEagle/conan-config.git

        # Workaround for slow cache restoration on Windows.
        # see: https://github.com/actions/cache/issues/752#issuecomment-1222415717
      - if: ${{ runner.os == 'Windows' }}
        name: Use GNU tar
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"

      - name: Cache Conan local data
        if: ${{ success() && inputs.step_conancache }}
        uses: actions/cache@v3
        env:
          # The secret is used as a variable, to allow invalidating all caches at once.
          cache-name: conan-${{ secrets.ACTION_CACHENAME }}
        with:
          # Exclude opengl/system because its build is responsible to install opengl system-wide.
          # (required on current Linux runner)
          # Exclude all */system following the same reasoning.
          #
          # There is a bug with the exclude pattern.
          # see workaround: https://github.com/actions/toolkit/issues/713#issuecomment-850321461
          path: |
            ~/.conan/data/*/*
            !~/.conan/data/*/system
            ${{ env.CONAN_USER_HOME_SHORT }}
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('conan/conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}

      - run: >
          conan create
          --build=missing
          --profile:build build/${{ runner.os }}
          --profile:host ${{ matrix.profile }}
          -o ${{ steps.recipe.outputs.name }}:build_tests=True
          -s compiler.cppstd=${{ matrix.cppstd }}
          ${{ inputs.conan_customparams }}
          conan/ ${{ steps.recipe.outputs.reference }}

      - name: Prepare virtual run env
        if: ${{ success() && inputs.step_runtests }}
        run: >
          conan install -g virtualrunenv
          --profile:build build/${{ runner.os }}
          --profile:host ${{ matrix.profile }}
          -o ${{ steps.recipe.outputs.name }}:build_tests=True
          -s compiler.cppstd=${{ matrix.cppstd }}
          ${{ inputs.conan_customparams }}
          ${{ steps.recipe.outputs.reference }}

      - name: Run tests (bash)
        if: ${{ success() && inputs.step_runtests && runner.os != 'Windows' }}
        run: |
          source activate_run.sh
          ${{ steps.recipe.outputs.name }}_tests
          source deactivate_run.sh

      - name: Run tests (cmd)
        if: ${{ success() && inputs.step_runtests && runner.os == 'Windows' }}
        run: |
          ./activate_run.bat
          ${{ steps.recipe.outputs.name }}_tests
          ./deactivate_run.bat
        # Powershell does not stop on first error
        # see: https://github.community/t/multiline-commands-on-windows-do-not-fail-if-individual-commands-fail/16753
        shell: cmd

      - name: Deploy Conan recipe
        #if: ${{ success() && contains('refs/heads/develop', github.ref) }}
        if: ${{ success() && inputs.deployrecipe_userchannel != '' }}
        run: |
          conan user -p ${{ secrets.CONAN_USER_PASSWORD }} -r adnn ${{ secrets.CONAN_USER_NAME }}
          conan upload -r adnn --confirm ${{ steps.recipe.outputs.reference }}
          echo "Deployed recipe: ${{ steps.recipe.outputs.reference }}" >> $GITHUB_STEP_SUMMARY
        shell: bash

      - name: Retrieve build artifacts
        if: ${{ success() && inputs.step_artifacts }}
        # This will execute the deploy() method of the Conan recipe, responsible for retrieval.
        run: >
          conan install
          --profile:build build/${{ runner.os }}
          --profile:host ${{ matrix.profile }}
          -o ${{ steps.recipe.outputs.name }}:build_tests=True
          -s compiler.cppstd=${{ matrix.cppstd }}
          ${{ inputs.conan_customparams }}
          ${{ steps.recipe.outputs.reference }}
        shell: bash

      - name: Upload build artifacts
        if: ${{ success() && inputs.step_artifacts }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-${{ matrix.development_build && 'devbuild' || 'build' }}
          path: bin/
          retention-days: 1
